syntax = "proto3";

package dto;

// import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

option go_package = "./dto";

// common messages.

// SortDirection indocate the direction of sorting.
enum SortDirection {
  Asc = 0; // 正序
  Desc = 1; // 倒序
}

// Error error response.
message Error {
  string msg = 1; // error message
}

// domain dtos.

// AddDomainReq arguments to add a domain.
message AddDomainReq {
  // @gotags: binding:"required" label:"名称"
  string name = 1; // 名称
  // @gotags: binding:"" label:"别名"
  repeated string alias = 2; // 别名
  // @gotags: binding:"" label:"序号"
  sint32 seq = 3; // 序号
  // @gotags: binding:"" label:"图标"
  string icon = 4; // 图标
  // @gotags: binding:"" label:"备注"
  string memo = 5; // 备注
  // @gotags: copier:"ParentID" binding:"" label:"父级Id"
  string parentId = 6; // 父级Id
}

// AddDomainRet return of adding a domain.
message AddDomainRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// ListDomainReq search arguments to list domains.
message ListDomainReq {
  // @gotags: form:"noPaging" binging:"" label:"是否不分页"
  bool noPaging = 20001; // 是否不分页
  // @gotags: form:"page" binding:"" label:"当前页码"
  sint64 page = 20002; // 当前页码
  // @gotags: form:"perPage" binding:"" label:"每页数据量"
  sint64 perPage = 20003; // 每页数据量
  // @gotags: form:"sortBy" binding:"" label:"字段排序条件"
  map<string, SortDirection> sortBy = 20004; // 字段排序条件
  // @gotags: form:"deleted" binding:"" label:"是否被软删除"
  bool deleted = 20005; // 是否被软删除
  // @gotags: form:"name" binding:"" label:"名称"
  string name = 1; // 名称
  // @gotags: form:"needTree" binding:"" label:"数据是否要转为树结构"
  bool needTree = 2; // 数据是否要转为树结构
}

// DomainListElem view model of listing domains.
message DomainListElem {
  // @gotags: copier:"ID"
  string id = 1; // Id
  string name = 2; // 名称
  repeated string alias = 3; // 别名
  sint32 seq = 4; // 序号
  string icon = 5; // 图标
  string memo = 6; // 备注
  // @gotags: copier:"ParentID"
  string parentId = 7; // 父级Id
  string createdBy = 20000; // 创建者
  string createdAt = 20001; // 创建时间
  string updatedBy = 20002; // 更新者
  string updatedAt = 20003; // 更新时间
  string deletedBy = 20004; // 禁用者
  string deletedAt = 20005; // 禁用时间
  repeated DomainListElem children = 20006; // 子节点
}

// ListDomainRet return of listing domains.
message ListDomainRet {
  repeated DomainListElem list = 1; // 列表
  sint64 total = 2; // 总量
}

// ProfileDomainReq arguments to profile a domain.
message ProfileDomainReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// ProfileDomainRet return of profiling a domain.
message ProfileDomainRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
  string name = 2; // 名称
  repeated string alias = 3; // 别名
  sint32 seq = 4; // 序号
  string icon = 5; // 图标
  string memo = 6; // 备注
  // @gotags: copier:"ParentID"
  string parentId = 7; // 父级Id
  string createdBy = 20000; // 创建者
  string createdAt = 20001; // 创建时间
  string updatedBy = 20002; // 更新者
  string updatedAt = 20003; // 更新时间
  string deletedBy = 20004; // 禁用者
  string deletedAt = 20005; // 禁用时间
}

// EditDomainReq arguments to edit a domain.
message EditDomainReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
  // @gotags: binding:"required" label:"名称"
  string name = 2; // 名称
  // @gotags: binding:"" label:"别名"
  repeated string alias = 3; // 别名
  // @gotags: binding:"" label:"序号"
  sint32 seq = 4; // 序号
  // @gotags: binding:"" label:"图标"
  string icon = 5; // 图标
  // @gotags: binding:"" label:"备注"
  string memo = 6; // 备注
  // @gotags: copier:"ParentID" binding:"" label:"父级Id"
  string parentId = 7; // 父级Id
}

// EditDomainRet return of editing a domain.
message EditDomainRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// EnableDomainReq arguments to enable a domain.
message EnableDomainReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// EnableDomainRet return of enabling a domain.
message EnableDomainRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// DisableDomainReq arguments to disable a domain.
message DisableDomainReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// DisableDomainRet return of disabling a domain.
message DisableDomainRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// RemoveDomainReq arguments to remove a domain.
message RemoveDomainReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// RemoveDomainRet return of removing a domain.
message RemoveDomainRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// menu dtos.

// AddMenuReq arguments to add a menu.
message AddMenuReq {
  // @gotags: binding:"" label:"名称"
  string name = 1; // 名称
  // @gotags: binding:"" label:"序号"
  sint32 seq = 2; // 序号
  // @gotags: binding:"" label:"图标"
  string icon = 3; // 图标
  // @gotags: binding:"" label:"页面路由"
  string route = 4; // 页面路由
  // @gotags: binding:"" label:"备注"
  string memo = 5; // 备注
  // @gotags: binding:"" label:"是否显示"
  bool show = 6;// 是否显示
  // @gotags: copier:"ParentID" binding:"" label:"父级Id"
  string parentId = 7; // 父级Id
  // @gotags: binding:"" label:"是否是菜单项"
  bool isItem = 8; // 是否是菜单项
}

// AddMenuRet return of adding a menu.
message AddMenuRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// ListMenuReq search arguments to list menus.
message ListMenuReq {
  // @gotags: form:"noPaging" binging:"" label:"是否不分页"
  bool noPaging = 20001; // 是否不分页
  // @gotags: form:"page" binding:"" label:"当前页码"
  sint64 page = 20002; // 当前页码
  // @gotags: form:"perPage" binding:"" label:"每页数据量"
  sint64 perPage = 20003; // 每页数据量
  // @gotags: form:"sortBy" binding:"" label:"字段排序条件"
  map<string, SortDirection> sortBy = 20004; // 字段排序条件
  // @gotags: form:"deleted" binding:"" label:"是否被软删除"
  bool deleted = 20005; // 是否被软删除
  // @gotags: form:"name" binding:"" label:"名称"
  string name = 1; // 名称
  // @gotags: form:"needTree" binding:"" label:"数据是否要转为树结构"
  bool needTree = 2; // 数据是否要转为树结构
  // @gotags: form:"route" binding:"" label:"页面路由"
  string route = 3; // 页面路由
  // @gotags: form:"show" binding:"" label:"是否已显示"
  bool show = 4; // 是否已显示
}

// MenuListElem view model of listing domains.
message MenuListElem {
  // @gotags: copier:"ID"
  string id = 1; // Id
  string name = 2; // 名称
  sint32 seq = 3; // 序号
  string icon = 4; // 图标
  string route = 5; // 页面路由
  string memo = 6; // 备注
  // @gotags: copier:"ParentID"
  string parentId = 7; // 父级Id
  bool show = 8; // 是否已显示
  bool isItem = 9; // 是否是菜单项
  string createdBy = 20000; // 创建者
  string createdAt = 20001; // 创建时间
  string updatedBy = 20002; // 更新者
  string updatedAt = 20003; // 更新时间
  string deletedBy = 20004; // 禁用者
  string deletedAt = 20005; // 禁用时间
  repeated MenuListElem children = 20006; // 子节点
}

// ListMenuRet return of listing menus.
message ListMenuRet {
  repeated MenuListElem list = 1; // 列表
  sint64 total = 2; // 总量
}

// ProfileMenuReq arguments to profile a menu.
message ProfileMenuReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// ProfileMenuRet return of profiling a menu.
message ProfileMenuRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
  string name = 2; // 名称
  sint32 seq = 3; // 序号
  string icon = 4; // 图标
  string route = 5; // 页面路由
  string memo = 6; // 备注
  // @gotags: copier:"ParentID"
  string parentId = 7; // 父级Id
  bool show = 8; // 是否已显示
  bool isItem = 9; // 是否是菜单项
  string createdBy = 20000; // 创建者
  string createdAt = 20001; // 创建时间
  string updatedBy = 20002; // 更新者
  string updatedAt = 20003; // 更新时间
  string deletedBy = 20004; // 禁用者
  string deletedAt = 20005; // 禁用时间
}

// EditMenuReq arguments to editing a menu.
message EditMenuReq {
  // @gotags: binding:"required" label:"名称"
  string name = 1; // 名称
  // @gotags: binding:"" label:"序号"
  sint32 seq = 2; // 序号
  // @gotags: binding:"" label:"图标"
  string icon = 3; // 图标
  // @gotags: binding:"" label:"页面路由"
  string route = 4; // 页面路由
  // @gotags: binding:"" label:"备注"
  string memo = 5; // 备注
  // @gotags: binding:"" label:"是否显示"
  bool show = 6; // 是否显示
  // @gotags: copier:"ParentID" binding:"" label:"父级Id"
  string parentId = 7; // 父级Id
  // @gotags: binding:"" label:"是否是菜单项"
  bool isItem = 8; // 是否是菜单项
}

// EditMenuRet return of editing a menu.
message EditMenuRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// EnableMenuReq arguments to enable a menu.
message EnableMenuReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// EnableMenuRet return of enabling a menu.
message EnableMenuRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// DisableMenuReq arguments to disable a menu.
message DisableMenuReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// DisableMenuRet return of disabling a menu.
message DisableMenuRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// RemoveMenuReq arguments to remove a menu.
message RemoveMenuReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// RemoveMenuRet return of removing a menu.
message RemoveMenuRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// menu-widget dtos.

// AddMenuWidgetReq arguments to add a menu-widget.
message AddMenuWidgetReq {
  // @gotags: binding:"required" label:"名称"
  string name = 1; // 名称
  // @gotags: binding:"" label:"序号"
  sint32 seq = 2; // 序号
  // @gotags: binding:"" label:"图标"
  string icon = 3; // 图标
  // @gotags: binding:"required" label:"相应的API的Method"
  string apiMethod = 4; // 相应的API的Method
  // @gotags: binding:"required" label:"相应的API的Path"
  string apiPath = 5; // 相应的API的Path
  // @gotags: binding:"" label:"备注"
  string memo = 6; // 备注
  // @gotags: binding:"" label:"是否已显示"
  bool show = 7; // 是否已显示
}

// AddMenuWidgetRet return of adding a menu-widget.
message AddMenuWidgetRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// ListMenuWidgetReq search arguments to list menu-widgets.
message ListMenuWidgetReq {
  // @gotags: form:"noPaging" binging:"" label:"是否不分页"
  bool noPaging = 20001; // 是否不分页
  // @gotags: form:"page" binding:"" label:"当前页码"
  sint64 page = 20002; // 当前页码
  // @gotags: form:"perPage" binding:"" label:"每页数据量"
  sint64 perPage = 20003; // 每页数据量
  // @gotags: form:"sortBy" binding:"" label:"字段排序条件"
  map<string, SortDirection> sortBy = 20004; // 字段排序条件
  // @gotags: form:"deleted" binding:"" label:"是否被软删除"
  bool deleted = 20005; // 是否被软删除
  // @gotags: form:"name" binding:"" label:"名称"
  string name = 1; // 名称
}

// MenuWidgetListElem an element of menu-widget list.
message MenuWidgetListElem {
  // @gotags: copier:"ID"
  string id = 1; // Id
  string name = 2; // 名称
  sint32 seq = 3; // 序号
  string icon = 4; // 图标
  string apiMethod = 5; // 相应的API的Method
  string apiPath = 6; // 相应的API的Path
  bool show = 7; // 是否已显示
  string createdBy = 20000; // 创建者
  string createdAt = 20001; // 创建时间
  string updatedBy = 20002; // 更新者
  string updatedAt = 20003; // 更新时间
  string deletedBy = 20004; // 禁用者
  string deletedAt = 20005; // 禁用时间
}

// ListMenuWidgetRet  return of listing menu-widgets.
message ListMenuWidgetRet {
  repeated MenuWidgetListElem list = 1; // 列表
  sint64 total = 2; // 总量
}

// ProfileMenuWidgetReq arguments to profile a menu-widget.
message ProfileMenuWidgetReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// ProfileMenuWidgetRet return of profiling a menu-widget.
message ProfileMenuWidgetRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
  string name = 2; // 名称
  sint32 seq = 3; // 序号
  string icon = 4; // 图标
  string apiMethod = 5; // 相应的API的Method
  string apiPath = 6; // 相应的API的Path
  string memo = 7; // 备注
  bool show = 8; // 是否已显示
  string createdBy = 20000; // 创建者
  string createdAt = 20001; // 创建时间
  string updatedBy = 20002; // 更新者
  string updatedAt = 20003; // 更新时间
  string deletedBy = 20004; // 禁用者
  string deletedAt = 20005; // 禁用时间
}

// EditMenuWidgetReq arguments to edit a menu-widget.
message EditMenuWidgetReq {
  // @gotags: binding:"required" label:"名称"
  string name = 1; // 名称
  // @gotags: binding:"" label:"序号"
  sint32 seq = 2; // 序号
  // @gotags: binding:"" label:"图标"
  string icon = 3; // 图标
  // @gotags: binding:"required" label:"相应的API的Method"
  string apiMethod = 4; // 相应的API的Method
  // @gotags: binding:"required" label:"相应的API的Path"
  string apiPath = 5; // 相应的API的Path
  // @gotags: binding:"" label:"备注"
  string memo = 6; // 备注
  // @gotags: binding:"" label:"是否已显示"
  bool show = 7; // 是否已显示
}

// EditMenuWidgetRet return of editing a menu-widget.
message EditMenuWidgetRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// EnableMenuWidgetReq arguments to enable a menu-widget.
message EnableMenuWidgetReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// EnableMenuWidgetRet return of enabling a menu-widget.
message EnableMenuWidgetRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// DisableMenuWidgetReq arguments to disable a menu-widget.
message DisableMenuWidgetReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// DisableMenuWidgetRet return of disabling a menu-widget.
message DisableMenuWidgetRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// RemoveMenuWidgetReq arguments to remove a menu-widget.
message RemoveMenuWidgetReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// RemoveMenuWidgetRet return of removing a menu-widget.
message RemoveMenuWidgetRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// role dtos.

// AddRoleReq arguments to add a role.
message AddRoleReq {
  // @gotags: binding:"required" label:"名称"
  string name = 1; // 名称
  // @gotags: binding:"" label:"别名"
  repeated string alias = 2; // 别名
  // @gotags: binding:"" label:"序号"
  sint32 seq = 3; // 序号
  // @gotags: binding:"" label:"图标"
  string icon = 4; // 图标
  // @gotags: binding:"" label:"备注"
  string memo = 5; // 备注
}

// AddRoleRet return of adding a role.
message AddRoleRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// ListRoleReq search arguments to list roles.
message ListRoleReq {
  // @gotags: form:"noPaging" binging:"" label:"是否不分页"
  bool noPaging = 20001; // 是否不分页
  // @gotags: form:"page" binding:"" label:"当前页码"
  sint64 page = 20002; // 当前页码
  // @gotags: form:"perPage" binding:"" label:"每页数据量"
  sint64 perPage = 20003; // 每页数据量
  // @gotags: form:"sortBy" binding:"" label:"字段排序条件"
  map<string, SortDirection> sortBy = 20004; // 字段排序条件
  // @gotags: form:"deleted" binding:"" label:"是否被软删除"
  bool deleted = 20005; // 是否被软删除
  // @gotags: form:"name" binding:"" label:"名称"
  string name = 1; // 名称
  // @gotags: form:"alias" binding:"" label:"别名" 
  string alias = 2; // 别名
  // @gotags: form:"createdBy" binding:"" label:"创建者" 
  string createdBy = 3; // 创建者
  // @gotags: form:"createdAtBegin" binding:"" label:"创建时间起始" 
  sint64 createdAtBegin = 4; // 创建时间起始
  // @gotags: form:"createdAtEnd" binding:"" label:"创建时间结束" 
  sint64 createdAtEnd = 5; // 创建时间结束
  // @gotags: form:"domainId" binding:"" label:"域ID" 
  string domainId = 6; // 域ID
}

// RoleListElem an element of role list.
message RoleListElem {
  // @gotags: copier:"ID"
  string id = 1; // Id
  string name = 2; // 名称
  repeated string alias = 3; // 别名
  sint32 seq = 4; // 序号
  string icon = 5; // 图标
  string memo = 6; // 备注
  repeated string domainIds = 7; // 域Ids
  repeated string domainNames = 8; // 域名s
  string createdBy = 20000; // 创建者
  string createdAt = 20001; // 创建时间
  string updatedBy = 20002; // 更新者
  string updatedAt = 20003; // 更新时间
  string deletedBy = 20004; // 禁用者
  string deletedAt = 20005; // 禁用时间
}

// ListRoleRet return of listing roles.
message ListRoleRet {
  repeated RoleListElem list = 1; // 列表
  sint64 total = 2; // 总量
}

// ProfileRoleReq arguments to profile a role.
message ProfileRoleReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// ProfileRoleRet return of profiling a role.
message ProfileRoleRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
  string name = 2; // 名称
  repeated string alias = 3; // 别名
  sint32 seq = 4; // 序号
  string icon = 5; // 图标
  string memo = 6; // 备注
  string createdBy = 20000; // 创建者
  string createdAt = 20001; // 创建时间
  string updatedBy = 20002; // 更新者
  string updatedAt = 20003; // 更新时间
  string deletedBy = 20004; // 禁用者
  string deletedAt = 20005; // 禁用时间
}

// EditRoleReq arguments to edit a role.
message EditRoleReq {
  // @gotags: binding:"required" label:"名称"
  string name = 1; // 名称
  // @gotags: binding:"" label:"别名"
  repeated string alias = 2; // 别名
  // @gotags: binding:"" label:"序号"
  sint32 seq = 3; // 序号
  // @gotags: binding:"" label:"图标"
  string icon = 4; // 图标
  // @gotags: binding:"" label:"备注"
  string memo = 5; // 备注
}

// EditRoleRet return of editing a role.
message EditRoleRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// RoleDomainsReq arguments to get domains of a role.
message RoleDomainsReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}


// RoleDomainsRet return of getting domains of a role.
message RoleDomainsRet {
  repeated string domainIds = 1; // 域Ids
}

// RoleAuthoritiesReq arguments to get authorities of a role.
message RoleAuthoritiesReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
  // @gotags: binding:"required" label:"DomainId"
  string domainId = 2; // DomainId
}

// RoleAuthoritiesRet return of getting authorities of a role.
message RoleAuthoritiesRet {
  repeated string menuIds = 1; // 菜单Ids
  repeated string widgetIds = 2; // 组件Ids
}

// AuthorizeRoleReq arguments to authorize a role.
message AuthorizeRoleReq {
  // @gotags: binding:"" label:"菜单的Ids"
  repeated string menuIds = 1; // 菜单的Ids
  // @gotags: binding:"" label:"控件的Ids"
  repeated string widgetIds = 2; // 控件的Ids
}

// AuthorizeRoleRet return of authorizing a role.
message AuthorizeRoleRet {
  string id = 1; // RoleId
  string domainId = 2; // DomainId
}

// EnableRoleReq arguments to enable a role.
message EnableRoleReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// EnableRoleRet return of enabling a role.
message EnableRoleRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// DisableRoleReq arguments to disable a role.
message DisableRoleReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// DisableRoleRet return of disabling a role.
message DisableRoleRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// RemoveRoleReq arguments to remove a role.
message RemoveRoleReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// RemoveRoleRet return of removing a role.
message RemoveRoleRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// staff dtos.

// AddStaffReq request parameters to add a staff.
message AddStaffReq {
  // @gotags: binding:"gte=2,lte=32" label:"账号"
  string account = 1; // 账号
  // @gotags: binding:"gte=8,lte=32" label:"密码"
  string password = 2; // 密码
  // @gotags: binding:"gte=2,lte=32" label:"昵称"
  string nickName = 3; // 昵称
  // @gotags: binding:"gte=2,lte=32" label:"真实姓名"
  string realName = 4; // 真实姓名
  // @gotags: binding:"required,email" label:"邮箱"
  string email = 5; // 邮箱
  // @gotags: binding:"gte=11,lte=17" label:"手机号"
  string phone = 6; // 手机号
  // @gotags: binding:"omitempty,oneof=Male Female" label:"性别"
  string gender = 7; // 性别
  // @gotags: binding:"" label:"头像"
  string avatar = 9; // 头像
  // @gotags: binding:"omitempty,dive,ip" label:"登录IP白名单"
  repeated string signInIpWhitelist = 10; // 登录IP白名单
}

// AddStaffRet return of adding a staff.
message AddStaffRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// ListStaffReq  request parameter to list staffs.
message ListStaffReq {
  // @gotags: form:"noPaging" binging:"" label:"是否不分页"
  bool noPaging = 20001; // 是否不分页
  // @gotags: form:"page" binding:"" label:"当前页码"
  sint64 page = 20002; // 当前页码
  // @gotags: form:"perPage" binding:"" label:"每页数据量"
  sint64 perPage = 20003; // 每页数据量
  // @gotags: form:"sortBy" binding:"" label:"字段排序条件"
  map<string, SortDirection> sortBy = 20004; // 字段排序条件
  // @gotags: form:"deleted" binding:"" label:"是否被软删除"
  bool deleted = 20005; // 是否被软删除
  // @gotags: form:"account" binding:"" label:"账号"
  string account = 1; // 账号
  // @gotags: form:"signIn" binding:"" label:"是否已登录"
  bool signIn = 2; // 是否已登录
  // @gotags: form:"nickName" binding:"" label:"昵称"
  string nickName = 3; // 昵称
  // @gotags: form:"realName" binding:"" label:"真实姓名"
  string realName = 4; // 真实姓名
  // @gotags: form:"email" binding:"" label:"邮箱"
  string email = 5; // 邮箱
  // @gotags: form:"phone" binding:"" label:"手机号"
  string phone = 6; // 手机号
  // @gotags: form:"gender" binding:"omitempty,oneof=Male Female" label:"性别"
  string gender = 7; // 性别
  // @gotags: form:"lastSignInIp" binding:"" label:"最近登录IP"
  string lastSignInIp = 8; // 最近登录IP
  // @gotags: form:"lastSignInTimeBegin" binding:"omitempty,gte=0" label:"最近登录时间起始"
  sint64 lastSignInTimeBegin = 9; // 最近登录时间起始
  // @gotags: form:"lastSignInTimeEnd" binding:"omitempty,gte=0" label:"最近登录时间结束"
  sint64 lastSignInTimeEnd = 10; // 最近登录时间结束
}

// StaffListElem an element of staff list.
message StaffListElem {
  // @gotags: copier:"ID"
  string id = 1; // Id
  string account = 2; // 账号
  string nickName = 3; // 昵称
  string realName = 4; // 真是姓名
  string email = 5; // 邮箱
  string phone = 6; // 手机号
  string gender = 7; // 性别
  string avatar = 8; // 头像
  bool signIn = 9; // 是否已登录
  bool status = 10; // 用户聊天室状态（在线、下线、繁忙、空闲）
  string signInToken = 11; // 是否已登录
  string lastSignInIp = 12; // 最近登录IP
  sint64 lastSignInTime = 13; // 最近登录时间
  string createdBy = 20000; // 创建者
  string createdAt = 20001; // 创建时间
  string updatedBy = 20002; // 更新者
  string updatedAt = 20003; // 更新时间
  string deletedBy = 20004; // 禁用者
  string deletedAt = 20005; // 禁用时间
}

// ListStaffRet return of listing staffs.
message ListStaffRet {
  repeated StaffListElem list = 1; // 列表
  sint64 total = 2; // 总量
}

// ProfileStaffReq arguments to profile a staff.
message ProfileStaffReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// ProfileStaffRet return of profiling a staff.
message ProfileStaffRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
  string account = 2; // 账号
  string nickName = 3; // 昵称
  string realName = 4; // 真实姓名
  string email = 5; // 邮箱
  string phone = 6; // 手机号
  string gender = 7; // 性别
  string avatar = 8; // 头像
  repeated string signInIpWhitelist = 9; // 登录IP白名单
  bool signIn = 10; // 是否已登录
  string signInToken = 11; // 是否已登录
  string lastSignInIp = 12; // 最近登录IP
  sint64 lastSignInTime = 13; // 最近登录时间
  string createdBy = 20000; // 创建者
  string createdAt = 20001; // 创建时间
  string updatedBy = 20002; // 更新者
  string updatedAt = 20003; // 更新时间
  string deletedBy = 20004; // 禁用者
  string deletedAt = 20005; // 禁用时间
}

// EditStaffReq arguments to edit a staff.
message EditStaffReq {
  // @gotags: binding:"gte=2,lte=32" label:"账号"
  string account = 1; // 账号
  // @gotags: binding:"gte=2,lte=32" label:"昵称"
  string nickName = 2; // 昵称
  // @gotags: binding:"gte=2,lte=32" label:"真实姓名"
  string realName = 3; // 真实姓名
  // @gotags: binding:"required,email" label:"邮箱"
  string email = 4; // 邮箱
  // @gotags: binding:"gte=11,lte=17" label:"手机号"
  string phone = 5; // 手机号
  // @gotags: binding:"omitempty,oneof=Male Female" label:"性别"
  string gender = 6; // 性别
  // @gotags: binding:"" label:"头像"
  string avatar = 7; // 头像
  // @gotags: binding:"omitempty,dive,ip" label:"登录IP白名单"
  repeated string signInIpWhitelist = 8; // 登录IP白名单
}

// EditStaffRet return of editing a staff.
message EditStaffRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// PatchStaffPasswordReq request parameter to update the password of a specific staff.
message PatchStaffPasswordReq {
  // @gotags: binding:"gte=8,lte=32" label:"旧密码"
  string oldPassword = 1; // 旧密码
  // @gotags: binding:"gte=8,lte=32" label:"新密码"
  string newPassword = 2; // 新密码
}

// PatchStaffPasswordRet return of updating the password of a specific staff.
message PatchStaffPasswordRet {
  // @gotags: copier:"ID"
  string id = 1; // StaffId
}

// AuthorizeStaffRolesInDomainReq  request parameter to update the roles of a specific staff.
message AuthorizeStaffRolesInDomainReq {
  // @gotags: binding:"" label:"角色Ids"
  repeated string roleIds = 1; // 角色Ids
}

// AuthorizeStaffRolesInDomainRet return of updating the roles of a specific staff.
message AuthorizeStaffRolesInDomainRet {
  // @gotags: copier:"ID"
  string id = 1; // StaffId
}

// StaffDomainsReq arguments to get domains of a staff.
message StaffDomainsReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// StaffDomainsRet return of getting domains of a staff.
message StaffDomainsRet {
  repeated string domainIds = 1; // 域Ids
}

// StaffRolesInDomainReq arguments to get roles of a staff in some domain.
message StaffRolesInDomainReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
  // @gotags: binding:"required" label:"DomainId"
  string domainId = 2; // DomainId
}

// StaffRolesInDomainRet return of getting roles of a staff in some domain.
message StaffRolesInDomainRet {
  repeated string roleIds = 1; // 角色Ids
}

// EnableStaffReq arguments to enable a staff.
message EnableStaffReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// EnableStaffRet return of enabling a staff.
message EnableStaffRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// DisableStaffReq arguments to disable a staff.
message DisableStaffReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// DisableStaffRet return of disabling a staff.
message DisableStaffRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// RemoveStaffReq arguments to remove a staff.
message RemoveStaffReq {
  // @gotags: binding:"required" label:"Id"
  string id = 1; // Id
}

// RemoveStaffRet return of removing a staff.
message RemoveStaffRet {
  // @gotags: copier:"ID"
  string id = 1; // Id
}

// change-log dtos.

// ChangeLogListReq request parameters to list change-logs.
message ListChangeLogReq {
  // @gotags: form:"noPaging" binging:"" label:"是否不分页"
  bool noPaging = 20001; // 是否不分页
  // @gotags: form:"page" binding:"" label:"当前页码"
  sint64 page = 20002; // 当前页码
  // @gotags: form:"perPage" binding:"" label:"每页数据量"
  sint64 perPage = 20003; // 每页数据量
  // @gotags: form:"sortBy" binding:"" label:"字段排序条件"
  map<string, SortDirection> sortBy = 20004; // 字段排序条件
  // @gotags: form:"collName" binding:"" label:"集合（表）名 
  string collName = 1; // 集合（表）名
  // @gotags: form:"recordId" binding:"" label:"记录ID" 
  string recordId = 2; // 记录ID
  // @gotags: form:"opTimeBegin" binding:"" label:"操作时间起始" 
  sint64 opTimeBegin = 3; // 操作时间起始
  // @gotags: form:"opTimeEnd" binding:"" label:"操作时间结束" 
  sint64 opTimeEnd = 4; // 操作时间结束
}

// ListChangeLogElem an element of change-logs list.
message ListChangeLogElem {
  // @gotags: copier:"ID"
  string id = 1; // Id
  string collName = 2; // 集合（表）名
  string recordId = 3; // 记录ID
  map<string, google.protobuf.Any> fieldDiff = 4; // 记录差异
  string createdBy = 20000; // 创建者
  string createdAt = 20001; // 创建时间
  string updatedBy = 20002; // 更新者
  string updatedAt = 20003; // 更新时间
}

// ListChangeLogRet return of listing change logs.
message ListChangeLogRet {
  repeated ListChangeLogElem list = 1; // 列表
  sint64 total = 2; // 总量
}

// access-log dtos.

// AccessLogListReq request parameters to list access-logs.
message ListAccessLogReq {
  // @gotags: form:"noPaging" binging:"" label:"是否不分页"
  bool noPaging = 20001; // 是否不分页
  // @gotags: form:"page" binding:"" label:"当前页码"
  sint64 page = 20002; // 当前页码
  // @gotags: form:"perPage" binding:"" label:"每页数据量"
  sint64 perPage = 20003; // 每页数据量
  // @gotags: form:"sortBy" binding:"" label:"字段排序条件"
  map<string, SortDirection> sortBy = 20004; // 字段排序条件
  // @gotags: form:"level" binding:"" label:"日志级别"
  string level = 1; // 日志级别
  // @gotags: form:"timeBegin" binding:"" label:"访问时间起始"
  sint64 timeBegin = 2; // 访问时间起始
  // @gotags: form:"timeEnd" binding:"" label:"访问时间结束"
  sint64 timeEnd = 3; // 访问时间结束
  // @gotags: form:"clientIp" binding:"" label:"客户端IP"
  string clientIp = 4; // 客户端IP
  // @gotags: form:"path" binding:"" label:"请求路径"
  string path = 5; // 请求路径
  // @gotags: form:"traceId" binding:"" label:"跟踪Id"
  string traceId = 6; // 跟踪Id
  // @gotags: from:"sessionId" binding:"" label:"会话Id"
  string sessionId = 7; // 会话Id
  // @gotags: form:"tag" binding:"" label:"标签"
  string tag = 8; // 标签
}

// ListAccessLogElem an element of access-logs list.
message ListAccessLogElem {
  // @gotags: copier:"ID"
  string id = 1; // Id
  string level = 2; // 日志级别
  sint64 time = 3; // 访问时间
  string clientIp = 4; // 客户端IP
  string proto = 5; // 网络协议 -- HTTP/1.0 or HTTP/1.1 ...
  string method = 6; // 请求方法
  string path = 7; // 请求路径
  string queries = 8; // 查询条件
  string requestHeaders = 9; // 请求头部
  string requestBody = 10; // 请求体
  string statusCode = 11; // 响应状态码
  string responseHeaders = 12; // 响应头部
  string responseBody = 13; // 响应体
  string latency = 14; // 请求延迟
  string traceId = 15; // 跟踪Id
  string sessionId = 20004; // 会话Id
  string tag = 20005; // 标签
  string stack = 20006; // 栈信息
  string createdBy = 20000; // 创建者
  string createdAt = 20001; // 创建时间
  string updatedBy = 20002; // 更新者
  string updatedAt = 20003; // 更新时间
}

// ListAccessLogRet return of listing access logs.
message ListAccessLogRet {
  repeated ListAccessLogElem list = 1; // 列表
  sint64 total = 2; // 总量
}

// auth dtos.

// GetPicCaptchaReq arguments to get picture captcha.
message GetPicCaptchaReq {
  // @gotags: binging:"" label:"ObsoleteId"
  string obsoleteId = 1; // ObsoleteId
}

// GetPicCaptchaRet return of getting picture captcha.
message GetPicCaptchaRet {
  string picCaptchaId = 1; // 验证码Id
  string picCaptchaB64s = 2; // 验证码图片
}

// GetPicCaptchaAnswerReq arguments to get picture captcha answer.
message GetPicCaptchaAnswerReq {
  // @gotags: binging:"" label:"Id"
  string id = 1; // Id
}

// GetPicCaptchaAnswerRet return of getting picture captcha answer.
message GetPicCaptchaAnswerRet {
  string answer = 1; // 验证码值
}

// SignInReq sign-in request arguments.
message SignInReq {
  // @gotags: binding:"gte=2,lte=32" label:"账号"
  string account = 1; // 账号
  // @gotags: binding:"gte=8,lte=32" label:"密码"
  string password = 2; // 密码
  // @gotags: binding:"required" label:"验证码Id"
  string picCaptchaId = 3; // 验证码Id
  // @gotags: binding:"required" label:"验证码值"
  string picCaptchaAnswer = 4; // 验证码值
}

// SignInRet return of sign-in.
message SignInRet {
  string token = 1; // 登录token
  sint64 expiresAt = 2; // token有效期
}

// GetOwnDomainsReq arguments to get own domains.
message GetOwnDomainsReq {}

// GetOwnDomainsElem domain element.
message GetOwnDomainsElem {
  // @gotags: copier:"ID"
  string id = 1; // Id
  string name = 2; // 名称
  repeated string alias = 3; // 别名
  string icon = 4; // 图标
}

// GetOwnDomainsRet return of getting own domains.
message GetOwnDomainsRet {
  repeated GetOwnDomainsElem list = 1; // 列表
  sint64 total = 2; // 总量
}

// GetOwnRolesElem element to return.
message GetOwnRolesElem {
  // @gotags: copier:"ID"
  string id = 1; // Id
  string name = 2; // 名称
  repeated string alias = 3; // 别名
  string icon = 4; // 图标
}

// GetOwnRolesReq request parameters.
message GetOwnRolesReq {
  // @gotags: form:"domainId" binding:"" label:"域Id"
  string domainId = 1; // 域Id
}

// GetOwnRolesRet return of getting own roles.
message GetOwnRolesRet {
  repeated GetOwnRolesElem list = 1; // 列表
  sint64 total = 2; // 总量
}

// SignOutReq arguments to sign out.
message SignOutReq {}

// SignOutRet return of signing out.
message SignOutRet {
  string id = 1; // Id
}

// MenuView menu view.
message MenuView {
  // @gotags: yaml:"-" copier:"ID"
  string id = 1;
  // @gotags: yaml:"name"
  string name = 2;
  // @gotags: yaml:"seq"
  sint32 seq = 3;
  // @gotags: yaml:"icon"
  string icon = 4;
  // @gotags: yaml:"route"
  string route = 5;
  // @gotags: yaml:"memo"
  string memo = 6;
  // @gotags: yaml:"show"
  bool show = 7;
  // @gotags: yaml:"isItem"
  bool isItem = 8;
  // @gotags: yaml:"widgets"
  repeated MenuWidgetView widgets = 9;
  // @gotags: yaml:"children"
  repeated MenuView children = 10;
}

// MenuWidgetView menu-widget view.
message MenuWidgetView {
  // @gotags: yaml:"-" copier:"ID"
  string id = 1;
  // @gotags: yaml:"name"
  string name = 2;
  // @gotags: yaml:"seq"
  sint32 seq = 3;
  // @gotags: yaml:"icon"
  string icon = 4;
  // @gotags: yaml:"apiMethod"
  string apiMethod = 5;
  // @gotags: yaml:"apiPath"
  string apiPath = 6;
  // @gotags: yaml:"memo"
  string memo = 7;
  // @gotags: yaml:"show"
  bool show = 8;
}

// GetOwnMenusReq request parameters.
message GetOwnMenusReq {
  // @gotags: form:"domainId" binding:"" label:"域Id"
  string domainId = 1; // 域Id
  // @gotags: form:"roleId" binding:"" label:"角色Id"
  string roleId = 2; // 角色Id
}

// GetOwnMenusRet return of getting own menus.
message GetOwnMenusRet {
  repeated MenuView list = 1; // 列表
  sint64 total = 2; // 总量
}
